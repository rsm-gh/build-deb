.TH build-deb 8  "29 April 2015" "Written by Rafael Senties Martinelli."
.SH NAME
 build-deb - Easy Debian/Tar.Gz package builder.
.SH HOME
 https://rsm.website/software/gnu-linux/software/build-deb
.SH DESCRIPTION
This program allows you to create Debian packages for binaries or interpreted languages (Python, Bash, Pearl.. etc..). You must keep in mind that this is only to create "basic" Debian packages, Debian Maintainers use more complicated tools like "dpkg-buildpackage" (You are able to use all the features of a Debian package like pre-installation scripts, etc..).
.LP
Nevertheless, this package will allow you to automatically sign your packages, and doing more complicated stuff with the magic of only one command.
.SH USAGE
.TP
build-deb <first command> [Arguments..]
.LP
.SH FIRST COMMAND
.B
<folder>
.RS
By default, if you only enter the <source folder> field without any other option, It will build a Debian Package.
.LP
.RS
The program will:
.RS
 - Change the executable permissions to: Bash, Python, Perl, and Ruby scripts, and to  binaries  with  the  mime-type : x-executable or octet-stream.
 - Gzip manuals.
 - Delete: *.pyc, *~ (backup files), and files placed in the root directory "/". It will also delete the ".git" folder.
.RE
Optional:
.RS
 - Sign the package (If you have a GPG key in your root key ring, and your email is in the maintainer filed)
 - Install the package (only for Debian Packages)
 - Use Global Variables (To replace, the date, program version, etc.. )
 - Fill the size of the package in the control file.
 - Add your package to your reprepro repository (only for Debian Packages)
 - Copy the changelog somewhere.
 - and more..
.RE
.RE
.LP
<source folder>  can be either an absolute path or the name of a directory placed in the current working directory. The source folder must contain a DEBIAN STRUCTURE! Tutorial: https://rsm.website/tutorials/gnu-linux/debian-packages/#build
*Note: Since the program automatically rename the packages "program-name_program-version_architecture" your source folder can contain a different name. This is pretty useful to create links outside the folder to prevent you from navigating trough the un-useful directories.
.LP
**To cancel the process use ctrl-c rather than closing the window.
.RE
.B -c, --control
.RS
Create a DEBIAN folder with a template of the control file.
.RE
.B -o,--options
.RS
Template of the options file.
.RE
.B -h, -help
.RS
Display the help dialog.
.RE
.B -v,--version
.RS
Display your current build-deb version.
.RE
.B -l, --license
.RS
Display the license.
.RE
.SH ARGUMENTS
.TP
.B -di, --dont-install
.RS
After building the package, do not install it.
.RE
.B -drgv, --dont-replace-global-variables
.RS
The program won't read the files in order to replace the global variables.
.RE
.B -frepo, --force-reprepro
.RS
Force your package to enter to the reprepro repository, even if there is package with the same or a higher version.
.RE
.B -drepo, --dont-add-reprepro
.RS
Ignore the copy changelog option of the options file.
.RE
.B -dcpc, --dont-copy-changelog
.RS
Ignore the copy changelog option of the options file.
.RE
.B -ds, --dont-sign
.RS
Do not sign the package.
.RE
.B -ds-tg, --dont-sign-targz
.RS
Do not sign TarGz packages
.RE
.B -tg, -targz
.RS
Create a tar.gz archive instead of the .deb
.RE
.B -deb-tg,	--debian-targz
.RS
Create a Debian and a TarGz Package
.RE
.RE
.SH GLOBAL VARIABLES
.TP
By default the program will read your files to try to find the Global Variables and replace them with the right value. (This can be skipped)
.TP
.B DEB_BUILDER_VERSION
.RS
Value of the version field of the control file.
.RE
.B DEB_BUILDER_DATE_TIME
.RS
Format: Sat Jan 10 16:32:30 CET 2015
.RE
.B DEB_BUILDER_YEAR
.RS
Format: 2015
.RE
.B DEB_BUILDER_DATE
.RS
Format: Year-Month-Day
.RE
.RE
.SH CONTROL FILE
.TP
.B Installed-Size
.RS
If you set "Installed-Size: DEB_BUILDER_SIZE" in the control file, the size of the package will automatically be substituted.	
.RE
.RE
.SH BUILD_DEB Options File
It is possible of using some more options and setting default arguments when building packages thanks to the BUILD_DEB file. 
.RS
Some of the options are: Setting default arguments, adding the package to a reprepro repository, copying the changelog, changing the tar.gz location, etc..
.RE
For more information generate a BUILD_DEB file "build-deb -o" and see its content
.RE
.SH EXAMPLES
.TP
build-deb program_source --targz --dont-replace-global-variables 
.RE
Will create a tar.gz package from a folder in the current directory called "program_source". The program will also skip replacing global variables. 
