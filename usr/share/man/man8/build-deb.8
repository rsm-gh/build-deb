.TH build-deb 8 "29 April 2015" "Written by Rafael Senties Martinelli."
.SH NAME
build-deb - Easy Debian and Tar.gz package builder.
.SH HOME
https://github.com/rsm-gh/build-deb
.SH DESCRIPTION
This script facilitates the creation of Debian packages for binaries or interpreted languages such as Python, Bash, or Perl. It is designed for creating "basic" Debian packages and does not replace more advanced tools like "dpkg-buildpackage." Nevertheless, it allows the use of features like pre-installation or post-installation scripts.
.LP
Additionally, build-deb can automatically sign packages and perform more advanced tasks with a single command.
.SH USAGE
.TP
build-deb <command> [arguments]
.LP
.SH COMMANDS
.TP
.B <folder>
.RS
This command will build a Debian package, and it can be filled with an absolute path or with a folder name of the current working directory. The folder must have a valid Debian structure.
.P
For more details about the folder structure, you can visit: https://rsm92.dev/articles/debian-packages#build
.LP
Default:
.RS
• Set executable permissions for Bash, Python, Perl, and Ruby scripts, and binaries with MIME types such as "x-executable" or "octet-stream".
.TP
• Compress manuals using gzip.
.TP
• Remove unnecessary files, such as *.pyc, backup files (*~), and files/hidden dirs in the root directory.
.RE
.TP
Optional:
.RS
• Sign the package (if a GPG key is available and the maintainer email is specified).
.TP
• Install the package (for Debian packages).
.TP
• Replace global variables (e.g., date, program version).
.TP
• Calculate and include the package size in the control file.
.TP
• Add the package to a reprepro repository (for Debian packages).
.TP
• Copy the changelog to a specified location.
.RE
.LP
*The program automatically renames packages using the format "program-name_program-version_architecture," so the source folder name can differ. This allows to use symbolic links outside the folder to simplify navigation.
.LP
**To cancel the process, use Ctrl-C rather than closing the window.
.RE
.TP
.B -c, --control
.RS
Create a DEBIAN folder with a control file template.
.RE
.TP
.B -o, --options
.RS
Generate a template for the options file.
.RE
.TP
.B -h, --help
.RS
Display the help dialog.
.RE
.TP
.B -v, --version
.RS
Display the current build-deb version.
.RE
.TP
.B -l, --license
.RS
Display the license information.
.RE
.SH ARGUMENTS
.TP
.B -di, --dont-install
.RS
Skip installing the package after building.
.RE
.TP
.B -drgv, --dont-replace-global-variables
.RS
Skip replacing global variables in the files.
.RE
.TP
.B -frepo, --force-reprepro
.RS
Force the package to be added to the reprepro repository, even if a package with the same or higher version exists.
.RE
.TP
.B -drepo, --dont-add-reprepro
.RS
Do not add the package to the reprepro repository.
.RE
.TP
.B -dcpc, --dont-copy-changelog
.RS
Do not copy the changelog as specified in the options file.
.RE
.TP
.B -ds, --dont-sign
.RS
Do not sign the package.
.RE
.TP
.B -tgz, --targz
.RS
Create a Tar.gz archive instead of a .deb package.
.RE
.TP
.B -deb-tgz, --debian-targz
.RS
Create both Debian and Tar.gz packages.
.RE
.SH GLOBAL VARIABLES
.TP
By default, build-deb read the files to identify and replace global variables with appropriate values. To disable this feature use "-drgv".
.TP
.B DEB_BUILDER_VERSION
.RS
Represents the version field in the control file.
.RE
.TP
.B DEB_BUILDER_DATE_TIME
.RS
Format: Sat Jan 10 16:32:30 CET 2015
.RE
.TP
.B DEB_BUILDER_YEAR
.RS
Format: 2015
.RE
.TP
.B DEB_BUILDER_DATE
.RS
Format: Year-Month-Day
.RE
.SH CONTROL FILE
.TP
.B Installed-Size
.RS
Specifying "Installed-Size: DEB_BUILDER_SIZE" in the control file automatically calculate and fill the package size.
.RE
.SH OPTIONS FILE
The options file allows to define de build arguments and to include some additional options. For more details generate a BUILD_DEB file "build-deb -o" and review its contents.
.RE
.SH EXAMPLES
.TP
build-deb program_source --targz --dont-replace-global-variables
.RS
Will create a Tar.gz package from the "program_source" folder in the current directory and it will skip replacing the global variables. This is how this package is created.
.RE